// Project	SSEM
// Entity	CONTROL
// File	control.hase
// Date	June 2021

$class_decls

void clear_PI();
void transmit_CI_to_add();
void transmit_CI_to_stat();
void updateCI_display();

// entity references

  sim_entity_id display_C0;
  sim_entity_id display_C1;
  sim_entity_id display_C2;
  sim_entity_id display_C3;
  sim_entity_id display_C4;

  sim_entity_id display_P0;
  sim_entity_id display_P1;
  sim_entity_id display_P2;
  sim_entity_id display_P3;
  sim_entity_id display_P4;
  sim_entity_id display_P13;
  sim_entity_id display_P14;
  sim_entity_id display_P15;

// Variable Declarations

  Clock * myClock;
  staticisor* myStaticisor;
  memory* myMemory;

 char char_bit, fn_string[3];
 int clock_cycle;
 int value, bit_value, pi_value, fn, address, i;
 t_five_bit cl_input, cl_output, addr_string;
 t_eight_bit staticisor_string;
 t_thirtytwo_bit pi, pi_input;


$class_defs

 void control::clear_PI()
  {
    strcpy (PI.address, "_____");
    strcpy (PI.fn, "___");
    value = 2;
  sim_schedule(display_P0, 0.0, DATA, SIM_PUT(int, value));
  sim_schedule(display_P1, 0.0, DATA, SIM_PUT(int, value));
  sim_schedule(display_P2, 0.0, DATA, SIM_PUT(int, value));
  sim_schedule(display_P3, 0.0, DATA, SIM_PUT(int, value));
  sim_schedule(display_P4, 0.0, DATA, SIM_PUT(int, value));
  sim_schedule(display_P13, 0.0, DATA, SIM_PUT(int, value));
  sim_schedule(display_P14, 0.0, DATA, SIM_PUT(int, value));
  sim_schedule(display_P15, 0.0, DATA, SIM_PUT(int, value));
 }

 void control::transmit_CI_to_add()
  {
    for ( i = 0; i < 5 ; i++)
	{cl_output.s5[i] = CI[i];}
   send_ADDRESS(to_adder, cl_output);
  }

void control::transmit_CI_to_stat()
  {
    for ( i = 0; i < 5 ; i++)
	{cl_output.s5[i] = CI[i];}
   send_ADDRESS(to_stat, cl_output);
  }

void control::updateCI_display()
{
  value = 0;
  if (CI[0] == '1')
   {value = 1;}
  sim_schedule(display_C0, 0.0, DATA, SIM_PUT(int, value));
  value = 0;
   if (CI[1] == '1')
   {value = 1;}
  sim_schedule(display_C1, 0.0, DATA, SIM_PUT(int, value));
  value = 0;
   if (CI[2] == '1')
   {value = 1;}
  sim_schedule(display_C2, 0.0, DATA, SIM_PUT(int, value));
  value = 0;
  if (CI[3] == '1')
   {value = 1;}
  sim_schedule(display_C3, 0.0, DATA, SIM_PUT(int, value));
  value = 0;
  if (CI[4] == '1')
   {value = 1;}
  sim_schedule(display_C4, 0.0, DATA, SIM_PUT(int, value));
}

$pre

 myClock = (Clock*) sim.get_entity( sim.get_entity_id( "CLOCK" ) );
 myStaticisor = (staticisor*) sim.get_entity( sim.get_entity_id( "STATICISOR" ) );
 myMemory = (memory*) sim.get_entity( sim.get_entity_id( "MEMORY" ) );

 display_C0 = sim.get_entity_id("CI_0");
 display_C1 = sim.get_entity_id("CI_1");
 display_C2 = sim.get_entity_id("CI_2");
 display_C3 = sim.get_entity_id("CI_3");
 display_C4 = sim.get_entity_id("CI_4");

 display_P0 = sim.get_entity_id("PI_0");
 display_P1 = sim.get_entity_id("PI_1");
 display_P2 = sim.get_entity_id("PI_2");
 display_P3 = sim.get_entity_id("PI_3");
 display_P4 = sim.get_entity_id("PI_4");
 display_P13 = sim.get_entity_id("PI_13");
 display_P14 = sim.get_entity_id("PI_14");
 display_P15 = sim.get_entity_id("PI_15");


 I_COUNT = 0;
 clear_PI();

$phase0

 clock_cycle = myClock->cycle / 2;
 printf("CONTROL: Clock cycle %d Phase 0\n", clock_cycle);
//  if (clock_cycle > 1000)
  if (clock_cycle > 50000)
   {
    printf("Timeout stopping simulation\n");
    stopSimulation();
   }

// predicates for use in sim_waiting test

  sim_from_port A_input (from_adder);
  sim_from_port M_input (instrn_in);

  if (sim_waiting(ev, A_input) > 0)
   {
    SIM_CAST_DEL (t_five_bit, cl_input, ev);
    strcpy (CI, cl_input.s5);
    updateCI_display();
//    strcpy (myStaticisor->F, "JMP");
    strcpy (myStaticisor->F, "___");
   myStaticisor->S = string_to_int(CI, 5);
    myStaticisor->fetch_instruction = true;
   }

  if (sim_waiting(ev, M_input) > 0)
   {
    I_COUNT ++;
    SIM_CAST_DEL (t_thirtytwo_bit, pi_input, ev);

// extract function and address from pi_input string; copy address to PI.address
// copy function mnemonic to PI.fn

    for (i = 0; i < 5; i++)
     {
	PI.address[i] = pi_input.s32[i];
	staticisor_string.s8[i] = pi_input.s32[i];
     }
    staticisor_string.s8[5] = pi_input.s32[13];
    staticisor_string.s8[6] = pi_input.s32[14];
    staticisor_string.s8[7] = pi_input.s32[15];


// create integer fn and integer address from PI

   fn = 0;
    for (i = 2; i >= 0; i --)
     {
	  bit_value = 0;
	  if (staticisor_string.s8[i+5] == '1')
	   {bit_value = 1;}
	  fn =  fn | bit_value;
	  if (i != 0)
	   {fn =  fn << 1;}
	 }

    address = string_to_int(staticisor_string.s8, 5);

  value = 0;
  if (pi_input.s32[0] == '1')
   {value = 1;}
  sim_schedule(display_P0, 0.0, DATA, SIM_PUT(int, value));
  value = 0;
  if (pi_input.s32[1] == '1')
   {value = 1;}
  sim_schedule(display_P1, 0.0, DATA, SIM_PUT(int, value));
  value = 0;
  if (pi_input.s32[2] == '1')
   {value = 1;}
  sim_schedule(display_P2, 0.0, DATA, SIM_PUT(int, value));
  value = 0;
  if (pi_input.s32[3] == '1')
   {value = 1;}
  sim_schedule(display_P3, 0.0, DATA, SIM_PUT(int, value));
  value = 0;
  if (pi_input.s32[4] == '1')
   {value = 1;}
  sim_schedule(display_P4, 0.0, DATA, SIM_PUT(int, value));
  value = 0;
  if (pi_input.s32[13] == '1')
   {value = 1;}
  sim_schedule(display_P13, 0.0, DATA, SIM_PUT(int, value));
  value = 0;
  if (pi_input.s32[14] == '1')
   {value = 1;}
  sim_schedule(display_P14, 0.0, DATA, SIM_PUT(int, value));
  value = 0;
  if (pi_input.s32[15] == '1')
   {value = 1;}
  sim_schedule(display_P15, 0.0, DATA, SIM_PUT(int, value));

   myStaticisor->fn = fn;
   myStaticisor->dump_state();
   switch (fn)
     {
       case 0:
	strcpy (PI.fn, "JMP");
	break;
   case 1:
	strcpy (PI.fn, "JRP");
	break;
    case 2:
	strcpy (PI.fn, "LDN");
	break;  
    case 3:
	strcpy (PI.fn, "STO");
	break;  
    case 4:
	strcpy (PI.fn, "SUB");
	break;  
    case 5:
	strcpy (PI.fn, "SUB");
	break;  
    case 6:
	strcpy (PI.fn, "CMP");
	break;  
    case 7:
	strcpy (PI.fn, "STP");
	break; 
     }

    strcpy (myStaticisor->F, PI.fn);
    myStaticisor->S = address;
    myStaticisor->fetch_operand = true;
   }
  dump_state();

$phase1

 printf("CONTROL: Clock cycle %d Phase 1\n", clock_cycle);

  sim_from_port A_input (from_adder);

  if (sim_waiting(ev, A_input) > 0)
   {
    SIM_CAST_DEL (t_five_bit, cl_input, ev);
    strcpy (CI, cl_input.s5);
    updateCI_display();
    dump_state();
   }

$report


